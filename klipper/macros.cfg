# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.

# See docs/Config_Reference.md for a description of parameters.

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.
# Ex: START_PRINT BED_TEMP=60 EXTRUDER_TEMP=210

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M140 S{BED_TEMP} # Start bed heating
  {% if printer.homed_axes != 'XYZ' %}
    G28	# home
  {% endif %}
  # BED_MESH_CALIBRATE
  BED_MESH_PROFILE LOAD=default
  G90                          # XYZ absolute
  M83                          # E relative
  G1 X0 Y0 Z30 F4000
  M104 S150                    # set temporary nozzle temp to prevent oozing during homing
  M190 S{BED_TEMP}             # Wait for bed to reach temperature
  M109 S{EXTRUDER_TEMP}        # Set and wait for nozzle to reach temperature
  G1 Z0.02 E2 F500             # drop filament stuck in nozzle
  G1 X2 Y210 Z0.20 E20 F3000   # print first line
  G1 X2.4 Y20 Z0.20 E10 F3000  # print second line
  G1 Z2 E-2 F4000              # up and retract
  G1 X5 Z0.3 F5000             # left and down to clean nozzle
  G1 Z3 F5000                  # up to safe travel
    
[gcode_macro END_PRINT]
gcode:
  {% set axis_max = printer.toolhead.axis_maximum %}
  {% set pos = printer.toolhead.position %}
  # Turn off bed, extruder and fan
  M140 S0
  M104 S0
  M106 S0
  M83 # E relative
  G90 # XYZ absolute
  G1 E-3 F600
  # Move nozzle away from print
  {% if pos.z <= ( axis_max.z - 40 ) %}
      G1 X0 Y220 Z{ pos.z + 40 } F2000
  {% else %}
      G1 X0 Y220 Z{ axis_max.z } F2000
  {% endif %}
  M84 # Disable steppers

### G29
# auto bed level
[gcode_macro G29]
gcode:
  {% if printer.homed_axes != 'XYZ' %}
    G28	# Home All Axes
  {% endif %}
  BED_MESH_CALIBRATE


######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

# [output_pin BEEPER_pin]
# pin: ar37
# #   Beeper pin. This parameter must be provided.
# #   ar37 is the default RAMPS/MKS pin.
# pwm: True
# #   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
# value: 0
# #   Silent at power on, set to 1 if active low.
# shutdown_value: 0
# #   Disable at emergency shutdown (no PWM would be available anyway).
# cycle_time: 0.001
# #   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
# #   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
gcode:
    {% set sensor = printer["htu21d my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

######################################################################
# G130: Set digital potentiometer value
######################################################################

# The macro below uses the MCP4018 SET_DIGIPOT command to implement
# a `G130` as used on classic Mightyboard-based printers such as
# The Makerbot Replicator 2/2X.
#
# The `G130` command can be used to lower the stepper current
# during preheating and raise the current again prior to starting
# the print.  This is necessary for printers with smaller power
# supplies that needed all the power to heat the bed.
#
# This macro requires one or more [mcp4018] configuration sections:
# (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
#
# Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating

[gcode_macro G130]
gcode:
  M400
  {% if ('X' in params) and ('mcp4018 x_axis_pot' in printer.configfile.config) %}
    {% set x_value = params['X']|float %}
    {% set x_axis_pot_scale = printer.configfile.config["mcp4018 x_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=x_axis_pot WIPER={ x_axis_pot_scale * (x_value / 127.0)}
  {% endif %}
  {% if ('Y' in params) and ('mcp4018 y_axis_pot' in printer.configfile.config) %}
    {% set y_value = params['Y']|float %}
    {% set y_axis_pot_scale = printer.configfile.config["mcp4018 y_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=y_axis_pot WIPER={ y_axis_pot_scale * (y_value / 127.0)}
  {% endif %}
  {% if ('Z' in params) and ('mcp4018 z_axis_pot' in printer.configfile.config) %}
    {% set z_value = params['Z']|float %}
    {% set z_axis_pot_scale = printer.configfile.config["mcp4018 z_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=z_axis_pot WIPER={ z_axis_pot_scale * (z_value / 127.0)}
  {% endif %}
  {% if ('A' in params) and ('mcp4018 a_axis_pot' in printer.configfile.config) %}
    {% set a_value = params['A']|float %}
    {% set a_axis_pot_scale = printer.configfile.config["mcp4018 a_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=a_axis_pot WIPER={ a_axis_pot_scale * (a_value / 127.0)}
  {% endif %}
  {% if ('B' in params) and ('mcp4018 b_axis_pot' in printer.configfile.config) %}
    {% set b_value = params['B']|float %}
    {% set b_axis_pot_scale = printer.configfile.config["mcp4018 b_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=b_axis_pot WIPER={ b_axis_pot_scale * (b_value / 127.0)}
  {% endif %}

##########################################################################
#                                                                        #
# OVERRIDES                                                              #
#                                                                        #
##########################################################################


##########################################################################
#                                                                        #
# TIMELAPSE_TAKE_FRAME: take the next picture                            #
#                                                                        #
##########################################################################

######################### definition #########################
## enable: enable or disable the next frame. Valid inputs: [True, False]
## takingframe: internal use. Valid inputs: [True, False]
##
## park.enable: enable or disable to park the head while taking a picture. Valid inputs: [True, False]
## park.pos   : used position for parking. Valid inputs: [center, front_left, front_right, back_left, back_right, custom, x_only, y_only]
## park.time  : used for the debug macro. Time in s
## park.custom.x, park.custom.y: coordinates of the custom parkposition. Unit [mm]
## park.custom.dz              : custom z hop for the picture. Unit [mm]
## park.coord : internal use
##
## extruder.fw_retract: enable disable fw retraction [True,False]
## extruder.extrude   : filament extruded at the end of park. Unit [mm]
## extruder.retract   : filament retract at the start of park. Unit [mm]
##
## speed.travel : used speed for travel from and to the park positon. Unit: [mm/min]
## speed.retract: used speed for retract [mm/min]
## speed.extrude: used speed for extrude [mm/min]
##
## verbose: Enable mesage output of TIMELAPSE_TAKE_FRAME
##
## check_time: time when the status of the taken picture is checked. Default 0.5 sec
##
## restore.absolute.coordinates: internal use
## restore.absolute.extrude    : internal use
## restore.speed               : internal use
## restore.e                   : internal use
## restore.factor.speed        : internal use
## restore.factor.extrude      : internal use
##
## macro.pause  : internal use
## macro.resume : internal use
##
## is_paused: internal use
###############################################################
[gcode_macro TIMELAPSE_TAKE_FRAME]
description: Take Timelapse shoot
variable_enable: False
variable_takingframe: False
variable_park: {'enable': False,
                'pos'   : 'center',
                'time'  : 0.1,
                'custom': {'x': 0, 'y': 0, 'dz': 0},
                'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder: {'fw_retract': False,
                    'retract': 1.0,
                    'extrude': 1.0}
variable_speed: {'travel': 100,
                 'retract': 15,
                 'extrude': 15}
variable_verbose: True
variable_check_time: 0.5
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro: {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused: False
gcode:
  {% set position_z = printer.toolhead.position.z %}
  {% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
  {% if enable and position_z >= 0.4 %}
    {% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
          (not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
      {% if park.enable %}
        {% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '', 
                      'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '', 
                      'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
        {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                       'extrude'    : printer.gcode_move.absolute_extrude},
                          'speed'   : printer.gcode_move.speed,
                          'e'       : printer.gcode_move.gcode_position.e,
                          'factor'  : {'speed'  : printer.gcode_move.speed_factor,
                                       'extrude': printer.gcode_move.extrude_factor}} %}
        SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
        {% if not printer[printer.toolhead.extruder].can_extrude %}
          {% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
        {% else %}
          {% if extruder.fw_retract %}
            G10
          {% else %}
            M83     ; insure relative extrusion
            G0 E-{extruder.retract} F{speed.retract * 60}
          {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True 
        {macro.pause}            ; execute the klipper PAUSE command
        SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
        G90                      ; insure absolute move
        {% if "xyz" not in printer.toolhead.homed_axes %}
          {% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
        {% else %}
          G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
        UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}
        M400
      {% endif %}
      _TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
    {% endif %}    
  {% else %}
    {% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
  {% endif %}
  
